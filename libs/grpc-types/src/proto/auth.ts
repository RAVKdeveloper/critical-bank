// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.1
//   protoc               v5.28.2
// source: proto/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices'
import { Observable } from 'rxjs'
import { Empty, UserEntity } from './entities'
import { UUID } from '@libs/core'

export const protobufPackageAuth = 'auth'

export interface RegistrationMsg {
  email: string | undefined
  phoneNumber?: string | undefined
  tgId?: number | undefined
  userName: string
  userSurname: string
  userLastName?: string | undefined
  password: string
}

export interface LoginMsg {
  email?: string | undefined
  phoneNumber?: string | undefined
  password: string
}

export interface VerifyAuthCodeMsg {
  userId: UUID
  authCode: string
}

export interface GetMeMsg {
  userId: UUID
}

export interface ResUserMsg {
  user: UserEntity | undefined
  timestamp: number
}

export interface ResVerifyUserWithTokensMSg {
  userId: string
  accessToken: string
  refreshToken: string
}

export const AUTH_PACKAGE_NAME = 'auth'

export interface AuthServiceClient {
  registration(request: RegistrationMsg): Observable<ResUserMsg>

  login(request: LoginMsg): Observable<ResUserMsg>

  verifyAuthCode(request: VerifyAuthCodeMsg): Observable<ResUserMsg>

  me(request: GetMeMsg): Observable<ResUserMsg>
}

export interface AuthServiceController {
  registration(request: RegistrationMsg): Promise<ResUserMsg> | Observable<ResUserMsg> | ResUserMsg

  login(request: LoginMsg): Promise<ResUserMsg> | Observable<ResUserMsg> | ResUserMsg

  verifyAuthCode(request: VerifyAuthCodeMsg): Promise<ResVerifyUserWithTokensMSg>

  me(request: GetMeMsg): Promise<ResUserMsg> | Observable<ResUserMsg> | ResUserMsg
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['registration', 'login', 'verifyAuthCode', 'me']
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)
      GrpcMethod('AuthService', method)(constructor.prototype[method], method, descriptor)
    }
    const grpcStreamMethods: string[] = []
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)
      GrpcStreamMethod('AuthService', method)(constructor.prototype[method], method, descriptor)
    }
  }
}

export const AUTH_SERVICE_NAME = 'AuthService'
