// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.1
//   protoc               v5.28.3
// source: proto/account.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices'
import { Observable } from 'rxjs'

export const protobufPackageAccount = 'account'

export interface GetAccountsMsg {
  userId: string
}

export interface GetBankAccountsMsg {
  id: string
  accountNumber: string
  currency: string
  accountName?: string | undefined
  balance: number
  affiliation: string
  accountType: string
  isBlocked: boolean
  isPremiumAccount: boolean
  createdAt: string
  updatedAt: string
}

export interface GetCryptoWalletsMsg {
  id: string
  cryptoCurrency: string
  address: string
  tokenBalance: number
  isBlocked: boolean
}

export interface ResponseGetAccountsMsg {
  bankAccounts: GetBankAccountsMsg[]
  cryptoWallets: GetCryptoWalletsMsg[]
}

export const ACCOUNT_PACKAGE_NAME = 'account'

export interface AccountServiceClient {
  getAllAccounts(request: GetAccountsMsg): Observable<ResponseGetAccountsMsg>
}

export interface AccountServiceController {
  getAllAccounts(
    request: GetAccountsMsg,
  ): Promise<ResponseGetAccountsMsg> | Observable<ResponseGetAccountsMsg> | ResponseGetAccountsMsg
}

export function AccountServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['getAllAccounts']
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)
      GrpcMethod('AccountService', method)(constructor.prototype[method], method, descriptor)
    }
    const grpcStreamMethods: string[] = []
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)
      GrpcStreamMethod('AccountService', method)(constructor.prototype[method], method, descriptor)
    }
  }
}

export const ACCOUNT_SERVICE_NAME = 'AccountService'
